1. Create a local folder and initialize it for git

	mkdir local_folder
	git init

2. Create a text file in the folder and commit it

	touch text_file.txt
	git add text_file.txt
	git commit -m "New file: add text_file.txt"

3. Create a remote repository on GitHub

	git remote add origin git@github.com:Twelve-cloud/new_repository.git

4. Push the local repository to GitHub

	git push origin master

5. Create a new branch (develop) and switch to it

	git checkout -b develop

6. Create a new branch from 'develop' and switch to it

	git checkout -b another_branch

7. Add the first line in the text file, commit, and push to remote

	echo "Hello world!" > text_file.txt
	git add text_file.txt
	git commit -m "Edit: change text_file.txt"
	git push origin develop
	gut push origin another_branch

8. Clone your repository from GitHub into a separate folder

	cd ..
	git clone git@github.com:Twelve-cloud/new_repository.git separate_folder

9. Create another branch from 'develop' and switch to it using cloned project

	cd separate_folder
	git checkout -b another_branch2

10. Add the first line of the text file (different from the first branch), commit, and push on remote

	echo "First line" > text_file.txt
	git add text_file.txt
	git commit -m "Edit: first line of text_file.txt"
	git push origin another_branch2

11. Switch to develop

	git checkout develop

12  Merge the first branch and push changes

	git merge another_branch
	git push origin develop

13. Merge the second branch and push changes

	git merge another_branch2
	#conflict

14. Resolve conflict

	vim text_file.txt

	#<<<<<<< HEAD
	#Hello world!
	#=======
	#First line
	#>>>>>>> another_branch2

	change to:

	#Hello world!
	#Second line

	git add text_file.txt
	git merge --continue	(autocommit after merging)

15. Commit and push a separate text file with a list of all the commands, which were used to solve the problem
	git push origin develop
